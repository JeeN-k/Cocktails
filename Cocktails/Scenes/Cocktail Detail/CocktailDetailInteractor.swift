//
//  CocktailDetailInteractor.swift
//  Cocktails
//
//  Created by Oleg Stepanov on 17.01.2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CocktailDetailBusinessLogic {
    func doSomething(request: CocktailDetail.Something.Request)
//    func doSomethingElse(request: CocktailDetail.SomethingElse.Request)
}

protocol CocktailDetailDataStore {
    var drinkID: String? { get set }
}

class CocktailDetailInteractor: CocktailDetailBusinessLogic, CocktailDetailDataStore {
    var presenter: CocktailDetailPresentationLogic?
    var worker: CocktailDetailWorker?
    var drinkID: String?

    // MARK: Do something (and send response to CocktailDetailPresenter)

    func doSomething(request: CocktailDetail.Something.Request) {
        guard let drinkID = drinkID else {
            return
        }
        worker = CocktailDetailWorker()
        worker?.getCocktailById(id: drinkID, completion: { drink in
            let response = CocktailDetail.Something.Response(drink: drink)
            self.presenter?.presentSomething(response: response)
        })

        
    }
//
//    func doSomethingElse(request: CocktailDetail.SomethingElse.Request) {
//        worker = CocktailDetailWorker()
//        worker?.doSomeOtherWork()
//
//        let response = CocktailDetail.SomethingElse.Response()
//        presenter?.presentSomethingElse(response: response)
//    }
}
