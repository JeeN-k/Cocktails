//
//  CocktailDetailViewController.swift
//  Cocktails
//
//  Created by Oleg Stepanov on 17.01.2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CocktailDetailDisplayLogic: AnyObject {
    func displayCocktailData(viewModel: CocktailDetail.Something.ViewModel)
    //    func displaySomethingElse(viewModel: CocktailDetail.SomethingElse.ViewModel)
}

class CocktailDetailViewController: UIViewController,  CocktailDetailDisplayLogic {
    var interactor: CocktailDetailBusinessLogic?
    var router: (NSObjectProtocol & CocktailDetailRoutingLogic & CocktailDetailDataPassing)?
    
    var table: UITableView = UITableView()
    private var dataSource: UITableViewDataSource?
    
    private var cocktail: Drink?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: - Setup Clean Code Design Pattern
    
    private func setup() {
        let viewController = self
        let interactor = CocktailDetailInteractor()
        let presenter = CocktailDetailPresenter()
        let router = CocktailDetailRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: - Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: - View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        getCocktail()
        prepareForLoad()
        setupTable()
        //        doSomethingElse()
    }
    
    // MARK: - request data from CocktailDetailInteractor
    
    func getCocktail() {
        let request = CocktailDetail.Something.Request()
        interactor?.doSomething(request: request)
    }
    
    // MARK: - display view model from CocktailDetailPresenter
    
    func displayCocktailData(viewModel: CocktailDetail.Something.ViewModel) {
        self.cocktail = viewModel.drink
        title = viewModel.drink.strDrink
        setEditing(true, animated: true)
    }
}

extension CocktailDetailViewController: UITableViewDelegate {
    private func prepareForLoad() {
        setEditing(false, animated: false)
        for item in CocktailDetailDataSource.cellIdentifier {
            table.register(UITableViewCell.self, forCellReuseIdentifier: item)
        }
        table.register(CocktailImageCell.self, forCellReuseIdentifier: "ImageCell")
        table.register(CocktailInstructionsCell.self, forCellReuseIdentifier: "InstructuinCell")
    }
    
    override func setEditing(_ editing: Bool, animated: Bool) {
        super.setEditing(editing, animated: animated)
        guard let cocktail = cocktail  else { return }
        dataSource = CocktailDetailDataSource(drink: cocktail)
        table.delegate = self
        table.dataSource = dataSource
        table.reloadData()
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        switch indexPath.section {
        case 0:
            return 200
        case 5:
            return 80
        default:
            return 70
        }
    }
    
    private func setupTable() {
        table.translatesAutoresizingMaskIntoConstraints = false
        view.addSubview(table)
        
        table.topAnchor.constraint(equalTo: view.topAnchor).isActive = true
        table.leadingAnchor.constraint(equalTo: view.leadingAnchor).isActive = true
        table.trailingAnchor.constraint(equalTo: view.trailingAnchor).isActive = true
        table.bottomAnchor.constraint(equalTo: view.bottomAnchor).isActive = true
    }
    
}
